/*
	This code was generated by a tool. (c) 2019 HQ.IO Corporation. All rights reserved.
*/

using System;
using System.Threading;
using System.Threading.Tasks;
using System.Text;
using System.Runtime.Serialization;
using System.Net;
using System.Linq;
using System.IO;
using System.Diagnostics;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Collections.Generic;
using Microsoft.Extensions.Options;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Configuration;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.ModelBinding;
using Microsoft.AspNetCore.JsonPatch;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Authorization;
using Dapper;
using Morcatko.AspNetCore.JsonMergePatch;
using ErrorStrings = HQ.Data.Contracts.ErrorStrings;
using HQ.Common.FastMember;
using HQ.Common.Models;
using HQ.Common;
using HQ.Data.Contracts.AspNetCore.Mvc;
using HQ.Data.Contracts.Configuration;
using HQ.Data.Contracts;
using HQ.Data.SessionManagement;
using HQ.Data.Sql.Batching;
using HQ.Data.Sql.Builders;
using HQ.Data.Sql.Descriptor;
using HQ.Data.Sql.Dialects;
using HQ.Data.Sql.Queries.Rosetta;
using HQ.Data.Sql.Queries;
using HQ.Data.Streaming.Fields;
using HQ.Data.Streaming;
using HQ.DotLiquid;
using HQ.Extensions.CodeGeneration.Scripting;
using HQ.Extensions.Metrics;
using HQ.Platform.Api.Configuration;
using HQ.Platform.Api.Conventions;
using HQ.Platform.Api.Extensions;
using HQ.Platform.Api.Filters;
using HQ.Platform.Api.Models;
using HQ.Platform.Runtime.Rest.Attributes;
using HQ.Platform.Security.AspNetCore.Extensions;
using HQ.Platform.Security.Configuration;


namespace HQ.Template
{
    public partial class PersonService : IPersonService
    {
        private readonly IPersonRepository _repository;

        public PersonService(IPersonRepository repository)
        {
            _repository = repository;
        }

        #region Reads

        public virtual async Task<IPage<Person>> GetAsync(string query = null, SortOptions sort = null, PageOptions page = null, FieldOptions fields = null, FilterOptions filter = null, ProjectionOptions projection = null)
        {
            var operation = await _repository.GetAsync(query, sort, page, fields, filter, projection);
             return operation.Data;
        }

        public virtual async Task<Person> GetAsync(long id, FieldOptions fields = null, ProjectionOptions projection = null)
        {
            var operation = await _repository.GetAsync(id, fields, projection);
             return operation.Data;
        }

        public virtual async Task<IStream<Person>> GetAsync(IEnumerable<long> ids = null, long startingAt = 0, int? count = null, FieldOptions fields = null, FilterOptions filter = null, ProjectionOptions projection = null)
        {
            var operation = await _repository.GetAsync(ids, startingAt, count, fields, filter, projection);
             return operation.Data;
        }

        #endregion

        #region Writes

        public virtual async Task<ObjectSave> SaveAsync(Person @object)
        {
            var operation = await _repository.SaveAsync(@object);
             return operation.Data;
        }

        public virtual async Task<ObjectSave> SaveAsync(Person @object, List<string> fields)
        {
            var operation = await _repository.SaveAsync(@object, fields);
             return operation.Data;
        }

        public virtual async Task SaveAsync(IEnumerable<Person> objects, BatchSaveStrategy strategy, long startingAt = 0, int? count = null)
        {
            await _repository.SaveAsync(objects, strategy, startingAt, count);
        }

        #endregion

        #region Deletes


        public virtual async Task<ObjectDelete> DeleteAsync(long id)
        {
            var operation = await _repository.DeleteAsync(id);
             return operation.Data;
        }

        public virtual async Task<ObjectDelete> DeleteAsync(Person @object)
        {
            var operation = await _repository.DeleteAsync(@object);
             return operation.Data;
        }

        public virtual async Task DeleteAsync(IEnumerable<long> ids, long startingAt = 0, int? count = null)
        {
            await _repository.DeleteAsync(ids, startingAt, count);
        }

        public virtual async Task DeleteAsync(IEnumerable<Person> objects, long startingAt = 0, int? count = null)
        {
            await _repository.DeleteAsync(objects, startingAt, count);
        }

        #endregion
    }
}

